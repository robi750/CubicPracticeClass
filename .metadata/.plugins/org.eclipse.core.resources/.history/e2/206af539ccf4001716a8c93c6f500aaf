package com.cubic.ehr.rest.resource;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.springframework.beans.factory.annotation.Autowired;

import com.cubic.ehr.prescriber.service.PrescriberService;
import com.cubic.ehr.prescriber.vo.PrescriberVO;

@Path("/prescriber")
@Consumes({ MediaType.APPLICATION_JSON })
@Produces({ MediaType.APPLICATION_JSON })
public class PrescriberResource {

	@Autowired
	private PrescriberService ps;

	/*
	 * @GET
	 * 
	 * @Path("/{pk}") public Response find(@PathParam("pk") final Long prescriberId)
	 * { final PrescriberVO prescriber = ps.findPrescriber(prescriberId); return
	 * Response.ok().entity(prescriber).build(); }
	 */
	@GET
	@Path("/{pk}")
	public Response find(@PathParam("pk") final String deaNumber) {
		final PrescriberVO prescriber = ps.findPrescriber(deaNumber);
		return Response.ok().entity(prescriber).build();
	}

	@GET
	public Response searchCustomer(@QueryParam("fName") final String firstName,
			@QueryParam("deaNumber") final String deaNumber) {

		final List<PrescriberVO> prescribers = ps.searchPrescriber(firstName, deaNumber);
		return Response.ok().entity(prescribers).build();

	}

	@POST
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public Response create(final PrescriberVO prescriber) {

		final PrescriberVO prescriberData = ps.createPrescriber(prescriber);
		return Response.ok().entity(prescriberData).build();

	}

	@PUT
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public Response modify(final PrescriberVO prescriber) {

		final PrescriberVO prescriberData = ps.modifyPrescriber(prescriber);
		return Response.ok().entity(prescriberData).build();

	}

	@DELETE
	@Path("/{pk}")
	public Response remove(@PathParam("pk") final Long prescriberId) {
		ps.removePrescriber(prescriberId);
		return Response.noContent().build();
	}
}